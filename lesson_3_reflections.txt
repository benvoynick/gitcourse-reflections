---When would you want to use a remote repository rather than keeping all your work local?
If the project spans multiple computers, a remote repository provides a central location for all of them. (Which might or might not involve multiple developers - maybe you just want to work from home or a coffee shop).

A remote repository helps provide backup in case something happens to the computer(s) used for development.

If you have an audience, client, or other party who wants to watch development even if they may not be participating in it, a remote repository like GitHub provides a place for them to track progress. For instance: a public repository for an open source project, or a private repository for a client on a contract project.

---Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
If you and someone else are working on the same branch at the same time, you could get into a very ugly situation where you are overwriting the same files with your commits. This situation won't be _quite_ as bad if you are each manually choosing when to pull.

Even if you are not conflicting by working on the same files, having someone's alterations to different files on the same project could produce unexpected behaviors or bugs without warning.

---Describe the differences between forks, clones, and branches. When would you use one instead of another?
A clone is a local copy of a repository. It makes no big difference to the overall shape of the repository/project, it's just there to have a copy of the repository per user.

Branches are a way of keeping track of different development tracks in a repository. They are useful when you want to make a temporary split in a project - perhaps for something as simple as having your own version of the project for a day or a week, or perhaps for something a bit longer term like working on an experimental feature for weeks or months. They are the ideal thing to use when you plan to (possibly) merge the branch back into master at some point down the road.

Forks are when you need completely independent repositories. Perhaps because you are an outsider contributor who does not have access to the main repository, or perhaps because you are planning to take a project in a new, permanently different direction.

---What is the benefit of having a copy of the last known state of the remote stored locally?
This way you can work off-line on your own commits without needing constant access to the repository.

---How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Without Git or Github, files would probably be on a shared network storage drive instead. Developers would have to choose between copying files locally - allowing access to others, but also making it possible that two versions of the same file will develop - or editing directly on the shared drive, locking others out. Mostly things would be harder. That said, adding your files back into the project would be as easy as saving (if editing directly) or copying files back over (if editing locally). Diffs could still be used to find out if you need to merge any changes, but overall history would need to be saved by manually taking snapshots of the project files.

What would be easier is not having to deal with commits and branches - no time would be spent trying to parse the structure of the project. Again, though, this is mostly downside because the history and parallel development enabled by those things would not be available.

---When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
The main benefit of working directly in master is speed and simplicity. This approach is going to be most appropriate when working solo, and/or when making bug fixes.

The benefits of working in master are:
-Not changing the main branch out from under others. (Good for collaboration.)
-Keeping track of major new changes like additional features as a separate line of commits, to be added back in to master only when ready for "prime time."
Using separate braches is generally going to be appropriate most of the time when collaborating with others, with the possible exception of very small bug fixes. When working solo, using branches other than master is still a good idea for any big new features that are going to take a while to become "production-ready."