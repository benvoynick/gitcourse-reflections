---What happens when you initialize a repository? Why do you need to do it?
Initializing a repository specifies the root directory of the repository and creates the .git directory with the basic infrastructure for beginning to log commits. Without this context and infrastructure, git would have no definition of the overall project and its location in one's files.

---How is the staging area different from the working directory and the repository? What value do you think it offers?
Rather than being a snapshot of a former state of the working directory - or being the working directory itself - the staging area keeps real time track of what's going in to the next commit, without actually making a commit. This allows one to build the elements of an upcoming commit over time without losing the "index" of what's changed and what has been added for the upcoming commit.

---How can you use the staging area to make sure you have one commit per logical change?
Since the files added to a single commit are under your control via the staging area, you can selectively add only some files to a single commit - even if you made two different logical changes, so long as they were in separate files you can still commit them one at a time.

---What are some situations when branches would be helpful in keeping your history organized? How would branches help?
As mentioned in the lesson, anything experimental that is not certain to be included in future master versions would be a good use for a branch. This could be a new feature, but could also include experiments like updating or switching between different libraries/frameworks/runtimes/etc.

---How do the diagrams help you visualize the branch structure?
The git log is one-dimensional, showing only a straight line of commits. The diagrams provide a two-dimensional view, showing how branches all fit together (and how orphaned commits may not).

---What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging does what the label says - the changes in both branches are combined together. Thus, it's represented in the diagram with two parents because it really does come from two parent commits!

---What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Automatic merging, as the name implies, can do a lot of the work for you, speeding up the process of merging. Insofar as it is able to proceed automatically, it also avoids introducing new typos and other human errors.

One downside is that once the merging process has begun and any conflicted files have been cut up by Git, you really need to finish the job; there is no going bit by bit. If you leave in the middle and new code comes in, Git is not going to be able to handle the new commit - you'll have to dump your existing work and start again. Of course, this can be ameliorated by merging often.